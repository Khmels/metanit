package chapter02_Basics;

public class P2_7_СonditionalExpressions {
    public static void main(String[] args) {
        //--- Операции сравнения ---
        //==
        int a = 10;
        int b = 4;
        boolean c = a == b;        // false
        boolean d = a == 10;       // true

        //!=
        int a1 = 10;
        int b1 = 4;
        boolean c1 = a1 != b1;      // true
        boolean d1 = a1 != 10;      // false

        //<
        int a2 = 10;
        int b2 = 4;
        boolean c2 = a2 < b2;       // false

        //>
        int a3 = 10;
        int b3 = 4;
        boolean c3 = a3 > b3;   // true

        //>=
        boolean c4 = 10 >= 10;    // true
        boolean b4 = 10 >= 4;     // true
        boolean d4 = 10 >= 20;    // false

        //<=
        boolean c5 = 10 <= 10;    // true
        boolean b5 = 10 <= 4;     // false
        boolean d5 = 10 <= 20;    // true

        //--- Логические операции ---
        /*

        c=a|b;  (c равно true, если либо a, либо b (либо и a, и b) равны true, иначе c будет равно false)
        c=a&b;  (c равно true, если и a, и b равны true, иначе c будет равно false)
        c=!b;   (c равно true, если b равно false, иначе c будет равно false)
        c=a^b;  (c равно true, если либо a, либо b (но не одновременно) равны true, иначе c будет равно false)
        c=a || b; (c равно true, если либо a, либо b (либо и a, и b) равны true, иначе c будет равно false)
        c=a && b; (c равно true, если и a, и b равны true, иначе c будет равно false)

         */

        boolean cond1 = (5 > 6) || (4 < 6); // 5 > 6 - false, 4 < 6 - true, поэтому возвращается true
        boolean cond2 = (5 > 6) || (4 > 6); // 5 > 6 - false, 4 > 6 - false, поэтому возвращается false
        boolean cond3 = (5 > 6) && (4 < 6); // 5 > 6 - false, поэтому возвращается false (4 < 6 - true, но не вычисляется)
        boolean cond4 = (50 > 6) && (4 / 2 < 3); // 50 > 6 - true, 4/2 < 3 - true, поэтому возвращается true
        boolean cond5 = (5 > 6) ^ (4 < 6); // 5 > 6 - true, поэтому возвращается true (4 < 6 - false)
        boolean cond6 = (50 > 6) ^ 4 / 2 < 3; // 50 > 6 - true, 4/2 < 3 - true, поэтому возвращается false
        boolean cond7 = (50 > 6) ^ (4 / 2 < 3); // 50 > 6 - true, 4/2 < 3 - true, поэтому возвращается false

        /*
        Выражение c=a|b; будет вычислять сначала оба значения - a и b и на их основе выводить результат.
        В выражении же c=a||b; вначале будет вычисляться значение a, и если оно равно true, то вычисление значения b уже смысла не имеет, так как у нас в любом случае уже c будет равно true. Значение b будет вычисляться только в том случае, если a равно false

        То же самое касается пары операций &/&&. В выражении c=a&b; будут вычисляться оба значения - a и b.
        В выражении же c=a && b; сначала будет вычисляться значение a, и если оно равно false, то вычисление значения b уже не имеет смысла, так как значение c в любом случае равно false. Значение b будет вычисляться только в том случае, если a равно true

        Таким образом, операции || и && более удобны в вычислениях, позволяя сократить время на вычисление значения выражения и тем самым повышая производительность. А операции | и & больше подходят для выполнения поразрядных операций над числами.
         */

        System.out.println((5 > 6) || (4 < 6));
        System.out.println((5 > 4) || (4 < 6));
        System.out.println((5 > 4) | (4 < 6));

    }
}
