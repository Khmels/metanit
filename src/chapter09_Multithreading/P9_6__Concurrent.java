package chapter09_Multithreading;

public class P9_6__Concurrent {

}
/*
Объекты синхронизации Synchroniser из пакета java.util.concurrent включают :

Semaphore	    объект синхронизации, ограничивающий количество потоков, которые могут «войти» в заданный участок кода;
Exchanger	    объект синхронизации, позволяющий провести обмен данными между двумя потоками;
Phaser	        объект синхронизации типа «барьер», но в отличие от CyclicBarrier, предоставляет больше гибкости.
CyclicBarrier	объект синхронизации типа «барьер», блокирующий выполнение определенного кода для заданного количества потоков;
CountDownLatch	объект синхронизации, разрешающий вход в заданный участок кода при выполнении определенных условий;
 */

/*

Атомарные классы пакета util.concurrent
Пакет java.util.concurrent.atomic содержит девять классов для выполнения атомарных операций.
Операция называется атомарной, если ее можно безопасно выполнять при параллельных вычислениях в нескольких потоках,
не используя при этом ни блокировок, ни синхронизацию synchronized.

Выполнение блокировки связано со средствами операционной системы и несет в себе опасность
приостановки с невозможностью дальнейшего возобновления потока,
а также опасность взаимоблокировки или инверсии приоритетов (priority inversion).

Кроме этого, появляются дополнительные расходы на переключение потоков.

Блокировка подразумевает ПЕССИМИСТИЧЕСКИЙ подход, разрешая только одному потоку выполнять определенный код,
связанный с изменением значения некоторой «общей» переменной.
Таким образом, никакой другой поток не имеет доступа к определенным переменным.

Но можно использовать и ОПТИМИСТИЧЕСКИЙ подход.
В этом случае блокировки не происходит, и если поток обнаруживает, что значение переменной изменилось другим потоком,
то он повторяет операцию снова, но уже с новым значением переменной. Так работают атомарные классы.
 */

// java-online.ru/concurrent-synchronizers.xhtml