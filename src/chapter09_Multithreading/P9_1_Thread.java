package chapter09_Multithreading;

public class P9_1_Thread {
    public static void main(String[] args) {
        Thread t = Thread.currentThread();  // получаем главный поток
        System.out.println(t.getName());    // main
        System.out.println(t.getPriority());
        System.out.println(t.getThreadGroup().getName());
        System.out.println("---------------------");
        System.out.println(t.getThreadGroup());

        System.out.println(t);              // Thread[main,5,main]
        /*
        Первое main будет представлять имя потока (что можно получить через t.getName()),
        второе значение 5 предоставляет приоритет потока (также можно получить через t.getPriority()),
        и последнее main представляет имя группы потоков, к которому относится текущий - по умолчанию также main
        (также можно получить через t.getThreadGroup().getName())
         */


    }
}
/*
В Java функциональность отдельного потока заключается в классе Thread.
И чтобы создать новый поток, нам надо создать объект этого класса.

Но все потоки не создаются сами по себе. Когда запускается программа, начинает работать главный поток этой программы.
От этого главного потока порождаются все остальные дочерние потоки.
 */

/*
Наиболее используемые из методов класса Thread:
все методы - см. uml или javadoc

        getName():                  возвращает имя потока
        setName(String name):       устанавливает имя потока
        getPriority():              возвращает приоритет потока
        setPriority(int proirity):  устанавливает приоритет потока.
                                        Приоритет является одним из ключевых факторов для выбора системой потока
                                        из кучи потоков для выполнения. В этот метод в качестве параметра передается
                                        числовое значение приоритета - от 1 до 10.
                                        По умолчанию главному потоку выставляется средний приоритет - 5.
        isAlive():                  возвращает true, если поток активен
        isInterrupted():            возвращает true, если поток был прерван
        join():                     ожидает завершение потока
        run():                      определяет точку входа в поток
        sleep():                    приостанавливает поток на заданное количество миллисекунд
        start():                    запускает поток, вызывая его метод run()
 */

/*
Для каждого потока создается свой собственный стек в памяти,
куда помещаются все локальные переменные и ряд других данных, связанных с выполнением потока.

Соответственно, чем больше потоков создается, тем больше памяти используется.
При этом надо помнить, в любой системе размеры используемой памяти ограничены.
Кроме того, во многих системах может быть ограничение на количество потоков.

Но даже если такого ограничения нет, то в любом случае имеется естественное ограничение в виде максимальной скорости процессора.
 */
